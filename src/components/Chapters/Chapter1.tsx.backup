import React, { CSSProperties, useEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { TypeAnimation } from 'react-type-animation';
import Modal from 'react-modal';
import { Html5QrcodeScanner } from 'html5-qrcode'; // Import the QR code scanner
import { useScreenVisibility } from '../ScreenVisibilityContext';
import Carousel from 'react-spring-3d-carousel';
import { config } from 'react-spring';
import { useCardContext } from '../CardContext';


// import { useCardContext } from '../CardContext';
// Set Modal app element for accessibility
Modal.setAppElement('#root');

const CardContainer = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
`;

// Define types for QR Reader props
interface QrReaderProps {
  delay: number;
  style: CSSProperties;
  onError: (err: any) => void;
  onScan: (data: string | null) => void;
}

// Create the QrReader component
const QrReader: React.FC<QrReaderProps> = ({ delay, style, onError, onScan }) => {
  const qrScannerRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    if (qrScannerRef.current) {
      // Initialize the Html5QrcodeScanner with the ID of the element
      const qrCodeScanner = new Html5QrcodeScanner(
        "qr-reader", // Pass the ID of the div element
        {
          fps: 10, // Frames per second, control the scan speed
          qrbox: 250, // Size of the scanning box
        },
        false
      );

      // Start the QR scanner
      qrCodeScanner.render(
        (decodedText: string) => {
          onScan(decodedText); // Handle successful scan
        },
        (error: string) => {
          onError(error); // Handle error
        }
      );

      // Clean up the QR scanner when the component unmounts
      return () => {
        qrCodeScanner.clear();
      };
    }
  }, [onScan, onError]);

  return (
    <div style={style}>
      {/* Add the id to the div */}
      <div ref={qrScannerRef} id="qr-reader" style={{ width: '100%', height: '100%' }}></div>
    </div>
  );
};

const Chapter1: React.FC = () => {
  const [showModal, setShowModal] = useState(false); // Modal visibility state
  const [scanData, setScanData] = useState<string>('Not Found'); // State to store scan results
  const [jsonData, setJsonData] = useState<any>(null); // State to store the JSON response

  const { screenVisibility, handleScreen } = useScreenVisibility();
  const {
    cardData,
    handleTempArr,
    checkOrder,
    getCardNumber,
    currentArray,
  } = useCardContext();

  const [goToSlide, setGoToSlide] = useState<number | undefined>(undefined);


  // Open and close modal functions
  const openModal = () => setShowModal(true);
  const closeModal = () => setShowModal(false);


  const goBackToMain = () => handleScreen('main');
  const goToChapter2 = () => handleScreen('chapter_2');

  const handleCardClick = (cardIndex: number) => {
    handleTempArr(cardData[cardIndex]);
    setShowModal(true);
  };
  // Placeholder images array
  const placeholderImages = [
    { id: 1, name: 'Placeholder 1', image: '/path/to/placeholder1.png' },
    { id: 2, name: 'Placeholder 2', image: '/path/to/placeholder2.png' },
    { id: 3, name: 'Placeholder 3', image: '/path/to/placeholder3.png' },
    { id: 4, name: 'Placeholder 4', image: '/path/to/placeholder4.png' },
  ];
  // const carouselSlides = cardData.map((card, index) => ({
  const carouselSlides = placeholderImages.map((card, index) => ({
    key: index,
    content: (
      <div
        onClick={() => handleCardClick(index)}
        className="flex flex-col items-center justify-center bg-white shadow-lg rounded p-4 cursor-pointer"
      >
        <img
          src={card.image}
          alt={card.name}
          style={{ width: '200px', height: '200px' }}
          className="w-64 h-64 object-contain"
        />
        <span className="mt-2 text-xl">{getCardNumber(card.id)}</span>
        <p className="mt-1 text-gray-600">{card.name}</p>
      </div>
    ),
    onClick: () => setGoToSlide(index),
  }));

  return (
    <div>
      <h1>Welcome to Chapter 1!</h1>
      <TypeAnimation
        sequence={[
          "It was a dark, stormy evening when the call came in. A nervous voice on the other end, trembling with something deeper than fear. The caretaker of Blackwood Mansion desperate for help. The house, passed down through generations, held more than memories. It held shadows. Secrets buried beneath its foundations. And now... something had begun to stir.",
          1000,
        ]}
        speed={50}
      />

      {/* Button to trigger the modal */}
      <button
        onClick={openModal}
        className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
      >
        Open QR Code Modal
      </button>

      {/* Modal Component */}
      <Modal
        isOpen={showModal}
        onRequestClose={closeModal}
        contentLabel="QR Code Modal"
        className="modal-content"
        overlayClassName="modal-overlay"
        closeTimeoutMS={200} // Smooth fade-out
      >
        <div className="modal-header">
          <h2 className="modal-title">ðŸªŸ QR Code Scanner</h2>
          <button onClick={closeModal} className="close-btn">
            âœ•
          </button>
        </div>
        <div className="modal-body">
          <div id="qr-reader" style={{ width: '300px', height: '300px' }}>
            {/* QR Reader Component */}
            <QrReader
              delay={300}
              style={{ width: '100%' }}
              onError={(err) => console.error('QR scan error', err)} // Error handling
              onScan={async (data: string | null) => {
                if (data) {
                  setScanData(data); // Save scanned data
                  console.log('Scanned data:', data);
              
                  try {
                    const response = await fetch(data);
                    if (!response.ok) {
                      throw new Error(`HTTP error! status: ${response.status}`);
                    }
              
                    const json = await response.json();
                    setJsonData(json); // Set JSON result
                  } catch (error) {
                    console.error('Fetch error:', error);
                    setJsonData({ error: 'Failed to fetch data.' });
                  }
                }
              }}
            />
          </div>

          <p>Scanned Data: {scanData}</p> {/* Display scanned data */}


          {/* Display the fetched JSON data */}
          {jsonData ? (
            <div>
              <h3>Fetched Data:</h3>
              <pre>{JSON.stringify(jsonData, null, 2)}</pre>
                {jsonData && Array.isArray(jsonData) ? (
                <div>
                  <h3>Fetched Data:</h3>
                  <pre>{JSON.stringify(jsonData, null, 2)}</pre>
                  {/* {jsonData.map((item: any) => (
                  <div key={item.id}>
                    <p>ID: {item.id}</p>
                    <p>Name: {item.name}</p>
                    <p>Image: {item.image}</p>
                  </div> */}
                  {jsonData.map((item: any, index: number) => {
                    <div key={item.id}>
                      <p>ID: {item.id}</p>
                      <p>Name: {item.name}</p>
                      <p>Image: {item.image}</p>
                    </div> 
                    const matchingCard = cardData.find((card) => card.id === item.id);
                    if (matchingCard) {
                    placeholderImages[index].name = matchingCard.name;
                    placeholderImages[index].id = matchingCard.id;
                    placeholderImages[index].image = matchingCard.image;
                    }
                    return (
                    <div key={item.id}>
                      <p>ID: {item.id}</p>
                      <p>Name: {item.name}</p>
                      <p>Image: {item.image}</p>
                      {matchingCard && (
                      <>
                        <p>Updated Placeholder Name: {matchingCard.name}</p>
                        <p>Updated Placeholder ID: {matchingCard.id}</p>
                        <p>Updated Placeholder Image: {matchingCard.image}</p>
                      </>
                      )}
                    </div>
                    );
                  })}
                </div>
                ) : (
                <p>No valid data fetched yet.</p>
                )}
            </div>
          ) : (
            <p>No data fetched yet.</p>
          )}

        </div>
      </Modal>



      <div style={{ width: '500px', height: '400px', margin: '40px auto' }}>
        <Carousel
          slides={carouselSlides}
          goToSlide={goToSlide} // `undefined` is now a valid value here
          offsetRadius={2}
          showNavigation={true}
          animationConfig={config.gentle}
        />
      </div>

      <button
        onClick={() => {
          if (currentArray.length === cardData.length) {
            checkOrder(currentArray);
          } else {
            alert('Please click all cards first.');
          }
        }}
      >
        Check Order
      </button>

      <button onClick={goBackToMain}>Back to Main</button>
      <button onClick={goToChapter2}>Go to Chapter 2</button>



    </div>
  );
};

export default Chapter1;
