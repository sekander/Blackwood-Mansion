{"ast":null,"code":"var _jsxFileName = \"/home/fnky/C0de/GIT/Blackwood_Mansion/Blackwood-Mansion/src/components/ScreenVisibilityContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\n\n// Define the type for the screen visibility state\n\n// Define the context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nconst ScreenVisibilityContext = /*#__PURE__*/createContext(undefined);\n\n// Create the provider component\nexport const ScreenVisibilityProvider = ({\n  children\n}) => {\n  _s();\n  // Define the screen visibility state with dynamic keys\n  const [screenVisibility, setScreenVisibility] = useState({\n    splash: true,\n    // SplashPage is visible by default\n    main: false,\n    // LoginPage is not visible by default\n    chapter_1: false,\n    chapter_2: false\n  });\n\n  // Function to handle the screen change when a button is clicked\n  const handleScreen = screen => {\n    setScreenVisibility(prevState => {\n      const updatedVisibility = {};\n      // Set visibility to show only the passed screen and hide others\n      for (const key in prevState) {\n        updatedVisibility[key] = false;\n      }\n      updatedVisibility[screen] = true;\n      return updatedVisibility;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ScreenVisibilityContext.Provider, {\n    value: {\n      screenVisibility,\n      handleScreen\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to access the context\n_s(ScreenVisibilityProvider, \"cMRPDAkarelH1YVlRuNJkbjyeFw=\");\n_c = ScreenVisibilityProvider;\nexport const useScreenVisibility = () => {\n  _s2();\n  const context = useContext(ScreenVisibilityContext);\n  if (!context) {\n    throw new Error('useScreenVisibility must be used within a ScreenVisibilityProvider');\n  }\n  return context;\n};\n_s2(useScreenVisibility, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ScreenVisibilityProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","ScreenVisibilityContext","undefined","ScreenVisibilityProvider","children","_s","screenVisibility","setScreenVisibility","splash","main","chapter_1","chapter_2","handleScreen","screen","prevState","updatedVisibility","key","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useScreenVisibility","_s2","context","Error","$RefreshReg$"],"sources":["/home/fnky/C0de/GIT/Blackwood_Mansion/Blackwood-Mansion/src/components/ScreenVisibilityContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\n\n// Define the type for the screen visibility state\ntype ScreenVisibilityState = { [key: string]: boolean };\n\n// Define the context type\ninterface ScreenVisibilityContextType {\n  screenVisibility: ScreenVisibilityState;\n  handleScreen: (screen: string) => void;\n}\n\n// Create the context\nconst ScreenVisibilityContext = createContext<ScreenVisibilityContextType | undefined>(undefined);\n\n// Create the provider component\nexport const ScreenVisibilityProvider = ({ children }: { children: ReactNode }) => {\n  // Define the screen visibility state with dynamic keys\n  const [screenVisibility, setScreenVisibility] = useState<ScreenVisibilityState>({\n    splash: true,  // SplashPage is visible by default\n    main: false,  // LoginPage is not visible by default\n    chapter_1: false,\n    chapter_2: false,\n  });\n\n  // Function to handle the screen change when a button is clicked\n  const handleScreen = (screen: string) => {\n    setScreenVisibility((prevState) => {\n      const updatedVisibility: ScreenVisibilityState = {};\n      // Set visibility to show only the passed screen and hide others\n      for (const key in prevState) {\n        updatedVisibility[key] = false;\n      }\n      updatedVisibility[screen] = true;\n      return updatedVisibility;\n    });\n  };\n\n  return (\n    <ScreenVisibilityContext.Provider value={{ screenVisibility, handleScreen }}>\n      {children}\n    </ScreenVisibilityContext.Provider>\n  );\n};\n\n// Custom hook to access the context\nexport const useScreenVisibility = (): ScreenVisibilityContextType => {\n  const context = useContext(ScreenVisibilityContext);\n  if (!context) {\n    throw new Error('useScreenVisibility must be used within a ScreenVisibilityProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;;AAE7E;;AAGA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA,MAAMC,uBAAuB,gBAAGL,aAAa,CAA0CM,SAAS,CAAC;;AAEjG;AACA,OAAO,MAAMC,wBAAwB,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAK;EAAAC,EAAA;EACjF;EACA,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAwB;IAC9EW,MAAM,EAAE,IAAI;IAAG;IACfC,IAAI,EAAE,KAAK;IAAG;IACdC,SAAS,EAAE,KAAK;IAChBC,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA,MAAMC,YAAY,GAAIC,MAAc,IAAK;IACvCN,mBAAmB,CAAEO,SAAS,IAAK;MACjC,MAAMC,iBAAwC,GAAG,CAAC,CAAC;MACnD;MACA,KAAK,MAAMC,GAAG,IAAIF,SAAS,EAAE;QAC3BC,iBAAiB,CAACC,GAAG,CAAC,GAAG,KAAK;MAChC;MACAD,iBAAiB,CAACF,MAAM,CAAC,GAAG,IAAI;MAChC,OAAOE,iBAAiB;IAC1B,CAAC,CAAC;EACJ,CAAC;EAED,oBACEf,OAAA,CAACC,uBAAuB,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEZ,gBAAgB;MAAEM;IAAa,CAAE;IAAAR,QAAA,EACzEA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACuB,CAAC;AAEvC,CAAC;;AAED;AAAAjB,EAAA,CA7BaF,wBAAwB;AAAAoB,EAAA,GAAxBpB,wBAAwB;AA8BrC,OAAO,MAAMqB,mBAAmB,GAAGA,CAAA,KAAmC;EAAAC,GAAA;EACpE,MAAMC,OAAO,GAAG5B,UAAU,CAACG,uBAAuB,CAAC;EACnD,IAAI,CAACyB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oEAAoE,CAAC;EACvF;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,mBAAmB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}