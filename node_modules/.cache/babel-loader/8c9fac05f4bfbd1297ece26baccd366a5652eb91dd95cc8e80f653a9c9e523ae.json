{"ast":null,"code":"import React,{createContext,useState,useContext}from'react';// Define the type for the screen visibility state\n// Define the context type\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create the context\nconst ScreenVisibilityContext=/*#__PURE__*/createContext(undefined);// Create the provider component\nexport const ScreenVisibilityProvider=_ref=>{let{children}=_ref;// Define the screen visibility state with dynamic keys\nconst[screenVisibility,setScreenVisibility]=useState({splash:true,// SplashPage is visible by default\nmain:false,// LoginPage is not visible by default\nchapter_1:false,chapter_2:false});// Function to handle the screen change when a button is clicked\nconst handleScreen=screen=>{setScreenVisibility(prevState=>{const updatedVisibility={};// Set visibility to show only the passed screen and hide others\nfor(const key in prevState){updatedVisibility[key]=false;}updatedVisibility[screen]=true;return updatedVisibility;});};return/*#__PURE__*/_jsx(ScreenVisibilityContext.Provider,{value:{screenVisibility,handleScreen},children:children});};// Custom hook to access the context\nexport const useScreenVisibility=()=>{const context=useContext(ScreenVisibilityContext);if(!context){throw new Error('useScreenVisibility must be used within a ScreenVisibilityProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","jsx","_jsx","ScreenVisibilityContext","undefined","ScreenVisibilityProvider","_ref","children","screenVisibility","setScreenVisibility","splash","main","chapter_1","chapter_2","handleScreen","screen","prevState","updatedVisibility","key","Provider","value","useScreenVisibility","context","Error"],"sources":["/home/fnky/C0de/School/Special-Topics/Blackwood-Mansion/src/components/ScreenVisibilityContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\n\n// Define the type for the screen visibility state\ntype ScreenVisibilityState = { [key: string]: boolean };\n\n// Define the context type\ninterface ScreenVisibilityContextType {\n  screenVisibility: ScreenVisibilityState;\n  handleScreen: (screen: string) => void;\n}\n\n// Create the context\nconst ScreenVisibilityContext = createContext<ScreenVisibilityContextType | undefined>(undefined);\n\n// Create the provider component\nexport const ScreenVisibilityProvider = ({ children }: { children: ReactNode }) => {\n  // Define the screen visibility state with dynamic keys\n  const [screenVisibility, setScreenVisibility] = useState<ScreenVisibilityState>({\n    splash: true,  // SplashPage is visible by default\n    main: false,  // LoginPage is not visible by default\n    chapter_1: false,\n    chapter_2: false,\n  });\n\n  // Function to handle the screen change when a button is clicked\n  const handleScreen = (screen: string) => {\n    setScreenVisibility((prevState) => {\n      const updatedVisibility: ScreenVisibilityState = {};\n      // Set visibility to show only the passed screen and hide others\n      for (const key in prevState) {\n        updatedVisibility[key] = false;\n      }\n      updatedVisibility[screen] = true;\n      return updatedVisibility;\n    });\n  };\n\n  return (\n    <ScreenVisibilityContext.Provider value={{ screenVisibility, handleScreen }}>\n      {children}\n    </ScreenVisibilityContext.Provider>\n  );\n};\n\n// Custom hook to access the context\nexport const useScreenVisibility = (): ScreenVisibilityContextType => {\n  const context = useContext(ScreenVisibilityContext);\n  if (!context) {\n    throw new Error('useScreenVisibility must be used within a ScreenVisibilityProvider');\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,KAAmB,OAAO,CAE7E;AAGA;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAMA;AACA,KAAM,CAAAC,uBAAuB,cAAGL,aAAa,CAA0CM,SAAS,CAAC,CAEjG;AACA,MAAO,MAAM,CAAAC,wBAAwB,CAAGC,IAAA,EAA2C,IAA1C,CAAEC,QAAkC,CAAC,CAAAD,IAAA,CAC5E;AACA,KAAM,CAACE,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGV,QAAQ,CAAwB,CAC9EW,MAAM,CAAE,IAAI,CAAG;AACfC,IAAI,CAAE,KAAK,CAAG;AACdC,SAAS,CAAE,KAAK,CAChBC,SAAS,CAAE,KACb,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,YAAY,CAAIC,MAAc,EAAK,CACvCN,mBAAmB,CAAEO,SAAS,EAAK,CACjC,KAAM,CAAAC,iBAAwC,CAAG,CAAC,CAAC,CACnD;AACA,IAAK,KAAM,CAAAC,GAAG,GAAI,CAAAF,SAAS,CAAE,CAC3BC,iBAAiB,CAACC,GAAG,CAAC,CAAG,KAAK,CAChC,CACAD,iBAAiB,CAACF,MAAM,CAAC,CAAG,IAAI,CAChC,MAAO,CAAAE,iBAAiB,CAC1B,CAAC,CAAC,CACJ,CAAC,CAED,mBACEf,IAAA,CAACC,uBAAuB,CAACgB,QAAQ,EAACC,KAAK,CAAE,CAAEZ,gBAAgB,CAAEM,YAAa,CAAE,CAAAP,QAAA,CACzEA,QAAQ,CACuB,CAAC,CAEvC,CAAC,CAED;AACA,MAAO,MAAM,CAAAc,mBAAmB,CAAGA,CAAA,GAAmC,CACpE,KAAM,CAAAC,OAAO,CAAGtB,UAAU,CAACG,uBAAuB,CAAC,CACnD,GAAI,CAACmB,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,oEAAoE,CAAC,CACvF,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}